name: CI/CD Pipeline for Client and Server

on:
  push:
    branches: [ "main", "dev" ]

jobs:
  # =================================================================
  #  JOB 0: Detect Changes
  #  This job runs first to determine if server or client files changed.
  #  Its output is used to conditionally run the other jobs.
  # =================================================================
  changes:
    name: Detect File Changes
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs.server }}
      client: ${{ steps.filter.outputs.client }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            server:
              - 'server/**'
            client:
              - 'client/**'

  # =================================================================
  #  SERVER JOBS
  # =================================================================

  #  JOB 1: Run Linting and Tests for Server
  test-and-lint-server:
    name: Run Server Linter and Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true'
    defaults:
      run:
        working-directory: ./server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set test environment variables
        run: |
          echo "SUPABASE_URL=http://dummy-url" >> .env
          echo "SUPABASE_KEY=dummy-key" >> .env
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      - name: Install server dependencies
        run: npm ci
      - name: Run server linter
        run: npm run lint
      - name: Run server tests
        run: npm test

  #  JOB 2: Build, Push, and Deploy Server to Development
  build-and-deploy-dev-server:
    name: Deploy Server to Development (Render)
    runs-on: ubuntu-latest
    needs: [changes, test-and-lint-server]
    if: needs.changes.outputs.server == 'true' && github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image for Dev
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/travel-share:development
      - name: Trigger Render Deploy for Development
        run: curl -X GET ${{ secrets.RENDER_DEPLOY_HOOK_DEV }}

  #  JOB 3: Build, Push, and Deploy Server to Production
  build-and-deploy-prod-server:
    name: Deploy Server to Production (Render)
    runs-on: ubuntu-latest
    needs: [changes, test-and-lint-server]
    if: needs.changes.outputs.server == 'true' && github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image for Prod
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/travel-share:latest
      - name: Trigger Render Deploy for Production
        run: curl -X GET ${{ secrets.RENDER_DEPLOY_HOOK_PROD }}